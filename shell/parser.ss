; parse a full string of code file to object list in list

(define (parse str)
    (define len (string-length str))
    (define match-diff 0)
    
  (define (parse-expr n)
      (let ((k (first-non-space n)))
        (if (< k 0)
            (list k #f)
            (parse-expr_p k))))
  
  (define (parse-expr_p k)
      (case (string-ref str k)
        ((#\()
         (set! match-diff (+ 1 match-diff))
         (let p ((j (+ k 1))
                 (ir '()))
           (define r (parse-expr j))
           (if (boolean? (cadr r))
               (if (cadr r)
                   (list (car r) ir)
                   (syntax-error "need ) from ~a\n" j))
               (p (car r) (append ir (cdr r))))))
        ((#\))
         (set! match-diff (- match-diff 1))
         (if (< match-diff 0)
             (syntax-error "extra ) at ~a\n" k)
             (list (+ k 1) #t)))
        (else
         (parse-atom k))))
  
  (define (parse-atom k)
      (if (char=? #\" (string-ref str k))
          (let p ((i (+ k 1)))
            (if (= i len)
                (syntax-error "need back quote from ~a\n" i)
                (if (and (char=? #\" (string-ref str i))
                         (not (char=? #\\ (string-ref str (- i 1)))))
                    (list (+ 1 i) (substring str k (+ 1 i)))
                    (p (+ i 1)))))
          (let p ((i (+ k 1)))
            (if (or (= i len)
                    (is-sep? (string-ref str i))
                    (char=? #\" (string-ref str i)))
                (list i (substring str k i))
                (p (+ i 1))))))
  
  (define (syntax-error s n)
      (printf s n)
      (exit 1))
  
  (define (is-sep? c)
      (or (space? c)
          (char=? #\( c)
          (char=? #\) c)))
  
  (define (space? c)
      (or (char=? #\space c)
          (char=? #\newline c)
          (char=? #\tab c)))
  
  (define (first-non-space n)
      (if (< n len)
          (if (space? (string-ref str n))
              (first-non-space (+ n 1))
              n)
          -1))
  
  (let p ((i 0)
          (j 0))
    (let ((r (parse-expr i)))
      (if (boolean? (cadr r))
          (printf "parse end.\n")
          (begin
           (printf "obj[~a]=~a\n" j (cadr r))
           (p (car r) (+ j 1)))))) 
  )

